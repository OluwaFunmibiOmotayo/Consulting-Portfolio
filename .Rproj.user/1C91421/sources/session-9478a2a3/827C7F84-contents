
# Define parameters
P <- 3          # number of variables
n <- 5          # number of repeated times
s <- 100        # number of subjects
T1 <- 1

# Mean vectors with same trend for cancer and no cancer groups
muy_cancer <- c(130, 130, 130, 130, 130)  # Blood Pressure
muz_cancer <- c(27.0, 27.0, 27.0, 27.0, 27.0)   # BMI
muw_cancer <- c(190, 190, 190, 190, 190)       # Cholesterol
mmu_cancer <- c(muy_cancer, muz_cancer, muw_cancer)

muy_no_cancer <- c(129, 129, 129, 129, 129)  # Blood Pressure
muz_no_cancer <- c(26.9, 26.9, 26.9, 26.9, 26.9) # BMI
muw_no_cancer <- c(188, 188, 188, 188, 188)  # Cholesterol
mmu_no_cancer <- c(muy_no_cancer, muz_no_cancer, muw_no_cancer)


# Number of variables
n <- 3

# Simulate variances (diagonal elements)
set.seed(1806)
#variances <- runif(n, min = 1, max = 10) # Variances for Y, Z, W

variances1 = 9.022741  
variances2 = 4.381519     
variances3 = 6.708053   


# correlation across variables 
rho_yz <- 0.2
rho_yw <- 0.2
rho_zw <- 0.2

# Calculate covariances
cov_yz <- rho_yz * sqrt(variances1 * variances2)
cov_yw <- rho_yw * sqrt(variances1 * variances3)
cov_zw <- rho_zw * sqrt(variances2 * variances3)

# Construct the covariance matrix
Sigma <- matrix(c(
  variances1, cov_yz, cov_yw,
  cov_yz, variances2, cov_zw,
  cov_yw, cov_zw, variances3
), nrow = n, byrow = TRUE)

Sigma

#Checking if it's positive definite
chol(Sigma)


# Function to compute AR(1) or Compound Symmetry correlation matrix
generate_cov_matrix <- function(RHO, type) {
  if (type == "AR1") {
    return(matrix(c(T1, RHO, RHO^2, RHO^3, RHO^4,
                    RHO, T1, RHO, RHO^2, RHO^3,
                    RHO^2, RHO, T1, RHO, RHO^2,
                    RHO^3, RHO^2, RHO, T1, RHO,
                    RHO^4, RHO^3, RHO^2, RHO, T1), nrow = 5, byrow = TRUE))
  } else if (type == "CS") {
    return(matrix(c(T1, RHO, RHO, RHO, RHO,
                    RHO, T1, RHO, RHO, RHO,
                    RHO, RHO, T1, RHO, RHO,
                    RHO, RHO, RHO, T1, RHO,
                    RHO, RHO, RHO, RHO, T1), nrow = 5, byrow = TRUE))
  }
}


# Function to calculate TPM for a given correlation structure
calculate_TPM <- function(RHO, type) {
  A <- generate_cov_matrix(RHO, type)
  SIGMV <- kronecker(Sigma, A)
  
  # Mean difference and Mahalanobis distance
  mean_diff <- mmu_cancer - mmu_no_cancer
  Delta <- (t(mean_diff) %*% solve(SIGMV) %*% mean_diff)
  D <- sqrt(Delta)
  
  # Misclassification probabilities
  p_misclass_cancer_as_no_cancer <- pnorm(-D / 2)
  p_misclass_no_cancer_as_cancer <- 1-pnorm(D / 2)
  
  # Total Probability of Misclassification
  TPM <- (p_misclass_cancer_as_no_cancer + p_misclass_no_cancer_as_cancer) / 2
  return(list(TPM = TPM, 
              p_cancer_as_no_cancer = p_misclass_cancer_as_no_cancer, 
              p_no_cancer_as_cancer = p_misclass_no_cancer_as_cancer))
}


# Serial correlation values to evaluate
RHO_values <- c(0, 0.2, 0.5, 0.9, 0.95, 0.99)


# Initialize results table
results <- data.frame(
  RHO = numeric(),
  Correlation_Structure = character(),
  TPM = numeric(),
  P_Cancer_as_No_Cancer = numeric(),
  P_No_Cancer_as_Cancer = numeric(),
  TP = numeric(),
  TN = numeric(),
  FP = numeric(),
  FN = numeric()
)


# Sample sizes
sample_size_cancer <- 50
sample_size_no_cancer <- 50


# Compute metrics for confusion matrix
for (RHO in RHO_values) {
  res_AR1 <- calculate_TPM(RHO, "AR1")
  res_CS <- calculate_TPM(RHO, "CS")
  
  # AR(1) results
  TP_AR1 <- round((1 - res_AR1$p_cancer_as_no_cancer) * sample_size_cancer)
  FN_AR1 <- round(res_AR1$p_cancer_as_no_cancer * sample_size_cancer)
  TN_AR1 <- round((1 - res_AR1$p_no_cancer_as_cancer) * sample_size_no_cancer)
  FP_AR1 <- round(res_AR1$p_no_cancer_as_cancer * sample_size_no_cancer)
  
  # Metrics for AR(1)
  Accuracy_AR1 <- (TP_AR1 + TN_AR1) / (sample_size_cancer + sample_size_no_cancer)
  Precision_AR1 <- TP_AR1 / (TP_AR1 + FP_AR1)
  Recall_AR1 <- TP_AR1 / (TP_AR1 + FN_AR1)
  F1_AR1 <- 2 * Precision_AR1 * Recall_AR1 / (Precision_AR1 + Recall_AR1)
  Specificity_AR1 <- TN_AR1 / (TN_AR1 + FP_AR1)
  Kappa_AR1 <- (Accuracy_AR1 - ((TP_AR1 + FN_AR1) * (TP_AR1 + FP_AR1) +
                                  (TN_AR1 + FP_AR1) * (TN_AR1 + FN_AR1)) / 
                  (sample_size_cancer + sample_size_no_cancer)^2) /
    (1 - ((TP_AR1 + FN_AR1) * (TP_AR1 + FP_AR1) +
            (TN_AR1 + FP_AR1) * (TN_AR1 + FN_AR1)) / 
       (sample_size_cancer + sample_size_no_cancer)^2)
  
  # Compound Symmetry results
  TP_CS <- round((1 - res_CS$p_cancer_as_no_cancer) * sample_size_cancer)
  FN_CS <- round(res_CS$p_cancer_as_no_cancer * sample_size_cancer)
  TN_CS <- round((1 - res_CS$p_no_cancer_as_cancer) * sample_size_no_cancer)
  FP_CS <- round(res_CS$p_no_cancer_as_cancer * sample_size_no_cancer)
  
  # Metrics for Compound Symmetry
  Accuracy_CS <- (TP_CS + TN_CS) / (sample_size_cancer + sample_size_no_cancer)
  Precision_CS <- TP_CS / (TP_CS + FP_CS)
  Recall_CS <- TP_CS / (TP_CS + FN_CS)
  F1_CS <- 2 * Precision_CS * Recall_CS / (Precision_CS + Recall_CS)
  Specificity_CS <- TN_CS / (TN_CS + FP_CS)
  Kappa_CS <- (Accuracy_CS - ((TP_CS + FN_CS) * (TP_CS + FP_CS) +
                                (TN_CS + FP_CS) * (TN_CS + FN_CS)) / 
                 (sample_size_cancer + sample_size_no_cancer)^2) /
    (1 - ((TP_CS + FN_CS) * (TP_CS + FP_CS) +
            (TN_CS + FP_CS) * (TN_CS + FN_CS)) / 
       (sample_size_cancer + sample_size_no_cancer)^2)
  
  # Add results to table
  results <- rbind(results, 
                   data.frame(RHO = RHO, Correlation_Structure = "AR(1)", 
                              TPM = res_AR1$TPM, 
                              P_Cancer_as_No_Cancer = res_AR1$p_cancer_as_no_cancer, 
                              P_No_Cancer_as_Cancer = res_AR1$p_no_cancer_as_cancer, 
                              TP = TP_AR1, TN = TN_AR1, FP = FP_AR1, FN = FN_AR1,
                              Accuracy = Accuracy_AR1, Precision = Precision_AR1, 
                              Recall = Recall_AR1, F1 = F1_AR1, 
                              Specificity = Specificity_AR1, Kappa = Kappa_AR1),
                   data.frame(RHO = RHO, Correlation_Structure = "Compound Symmetry", 
                              TPM = res_CS$TPM, 
                              P_Cancer_as_No_Cancer = res_CS$p_cancer_as_no_cancer, 
                              P_No_Cancer_as_Cancer = res_CS$p_no_cancer_as_cancer, 
                              TP = TP_CS, TN = TN_CS, FP = FP_CS, FN = FN_CS,
                              Accuracy = Accuracy_CS, Precision = Precision_CS, 
                              Recall = Recall_CS, F1 = F1_CS, 
                              Specificity = Specificity_CS, Kappa = Kappa_CS))
}


# Output the results table
print(results)
